# -*- coding: utf-8 -*-
"""DMPro1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jpa74kALAIxYI17fH-nIXAVQjCHjYTTi

A program to extract new features from the iris dataset and perform linear and logistic regression on it

"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

"""Loading dataset and generating new features """

dataset = load_iris()
x = dataset['data']
y = dataset['target']


x0 = np.ones((150,5))
x0[: , 1] = x[: , 0]
x0[: , 2] = x[: , 1]
x0[: , 3] = x[: , 2]
x0[: , 4] = x[: , 3]
X = x0
 
r1 = np.random.uniform(0,1,5)
z1 = np.array(np.matmul(X , r1))
r2 = np.random.uniform(0,1,5)
z2 = np.matmul(X , r2)
r3 = np.random.uniform(0,1,5)
z3 = np.matmul(X , r3)

New_features = np.ones((150 , 3))
New_features[: , 0] = z1
New_features[: , 1] = z2
New_features[: , 2] = z3
New_features.shape

"""# Linear Regression
Using the regressor inplemented in scikitlearn library

First spliting data into test and train and then fitting the train data

Then we predict labels of test data and compare it with the original labels
"""

Nf_train , Nf_test , y_train , y_test = train_test_split(New_features , y , test_size=0.2)

clf1 = LinearRegression()
clf1.fit(Nf_train , y_train)
y1_pred = clf1.predict(Nf_test)

print('<<Linear Regression>> \n')
print('Accuracy : ' , accuracy_score(y_test , y1_pred.round()))
print('\n')
print('CoMatrix : \n', confusion_matrix(y_test , y1_pred.round()))

"""# Logistic Regression
We repeat what was done in the last section only using logistic regression
"""

clf2 = LogisticRegression()
clf2.fit(Nf_train , y_train)
y2_pred = clf2.predict(Nf_test)

print('<<Logistic Regression>> \n')
print('\n')
print('Accuracy : ' , accuracy_score(y_test , y2_pred.round()))
print('CoMatrix : \n', confusion_matrix(y_test , y2_pred.round()))